 Percent |	Source code & Disassembly of binary_search for cycles:u (2572 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004067e0 <std::optional<std::reference_wrapper<int const> > binary_search_opt2_branchless2<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z30binary_search_opt2_branchless2ILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            return *base;
         :            }
         :
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt2_branchless2(const VecType<Aligned> & elements, int32_t target) {
    1.21 :   4067e0: push   %rbp
    0.00 :   4067e1: mov    %esi,%r8d
    0.00 :   4067e4: mov    %rsp,%rbp
    0.00 :   4067e7: and    $0xffffffffffffffe0,%rsp
         :            data() _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
         :
         :            const _Tp*
         :            data() const _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
    0.00 :   4067eb: mov    (%rdi),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4067ee: mov    0x8(%rdi),%rdx
    0.00 :   4067f2: sub    %rsi,%rdx
    0.35 :   4067f5: sar    $0x2,%rdx
         :            const int32_t * base = elements.data();
         :            int32_t len = elements.size();
         :            while (len > 1) {
    0.00 :   4067f9: cmp    $0x1,%edx
    0.00 :   4067fc: jle    406820 <std::optional<std::reference_wrapper<int const> > binary_search_opt2_branchless2<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x40>
    0.00 :   4067fe: mov    %edx,%eax
         :            int32_t half = len / 2;
    6.03 :   406800: mov    %eax,%edx
    0.08 :   406802: sar    %edx
         :            if (*(base + half - 1) < target) {
    4.39 :   406804: movslq %edx,%rcx
    2.76 :   406807: lea    0x0(,%rcx,4),%rdi
    3.73 :   40680f: cmp    %r8d,-0x4(%rsi,%rcx,4)
    0.00 :   406814: jge    406819 <std::optional<std::reference_wrapper<int const> > binary_search_opt2_branchless2<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x39>
         :            base += half;
   24.50 :   406816: add    %rdi,%rsi
         :            }
         :            len -= half;
   32.03 :   406819: sub    %edx,%eax
         :            while (len > 1) {
   11.08 :   40681b: cmp    $0x1,%eax
    0.00 :   40681e: jg     406800 <std::optional<std::reference_wrapper<int const> > binary_search_opt2_branchless2<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x20>
         :            }
         :            if (*base != target) {
         :            return std::nullopt;
    2.02 :   406820: xor    %eax,%eax
         :            if (*base != target) {
    0.16 :   406822: cmp    %r8d,(%rsi)
    0.00 :   406825: jne    406831 <std::optional<std::reference_wrapper<int const> > binary_search_opt2_branchless2<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x51>
         :            }
         :            return *base;
    3.58 :   406827: mov    %rsi,-0x10(%rsp)
    0.00 :   40682c: mov    $0x1,%eax
    0.00 :   406831: mov    %al,-0x8(%rsp)
         :            }
    0.04 :   406835: mov    -0x10(%rsp),%rax
    2.76 :   40683a: mov    -0x8(%rsp),%rdx
    5.29 :   40683f: leaveq
    0.00 :   406840: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (2499 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406770 <std::optional<std::reference_wrapper<int const> > binary_search_opt1_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z29binary_search_opt1_branchlessILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            return *it;
         :            }
         :
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt1_branchless(const VecType<Aligned> & elements, int32_t target) {
    1.24 :   406770: push   %rbp
    0.00 :   406771: mov    %rdi,%rax
    0.00 :   406774: mov    %esi,%edi
    0.00 :   406776: mov    %rsp,%rbp
    0.00 :   406779: and    $0xffffffffffffffe0,%rsp
         :            data() _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
         :
         :            const _Tp*
         :            data() const _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
    0.00 :   40677d: mov    (%rax),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   406780: mov    0x8(%rax),%rax
    0.36 :   406784: sub    %rsi,%rax
    0.00 :   406787: sar    $0x2,%rax
    0.00 :   40678b: jmp    4067a7 <std::optional<std::reference_wrapper<int const> > binary_search_opt1_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x37>
    0.00 :   40678d: nopl   (%rax)
         :            const int32_t * base = elements.data();
         :            int32_t len = elements.size();
         :            while (len > 1) {
         :            int32_t half = len / 2;
   12.08 :   406790: mov    %eax,%edx
    0.12 :   406792: sar    %edx
         :            if (*(base + half - 1) < target) {
    5.76 :   406794: movslq %edx,%rcx
    2.36 :   406797: lea    0x0(,%rcx,4),%r8
    6.32 :   40679f: cmp    %edi,-0x4(%rsi,%rcx,4)
    0.00 :   4067a3: jl     4067d0 <std::optional<std::reference_wrapper<int const> > binary_search_opt1_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x60>
         :            int32_t half = len / 2;
   19.96 :   4067a5: mov    %edx,%eax
         :            while (len > 1) {
    4.44 :   4067a7: cmp    $0x1,%eax
    0.00 :   4067aa: jg     406790 <std::optional<std::reference_wrapper<int const> > binary_search_opt1_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x20>
         :            else {
         :            len = half;
         :            }
         :            }
         :            if (*base != target) {
         :            return std::nullopt;
    2.24 :   4067ac: xor    %eax,%eax
         :            if (*base != target) {
    0.32 :   4067ae: cmp    %edi,(%rsi)
    0.00 :   4067b0: jne    4067bc <std::optional<std::reference_wrapper<int const> > binary_search_opt1_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x4c>
         :            }
         :            return *base;
    3.20 :   4067b2: mov    %rsi,-0x10(%rsp)
    0.04 :   4067b7: mov    $0x1,%eax
    0.08 :   4067bc: mov    %al,-0x8(%rsp)
         :            }
    0.04 :   4067c0: mov    -0x10(%rsp),%rax
    2.52 :   4067c5: mov    -0x8(%rsp),%rdx
    7.24 :   4067ca: leaveq
    0.00 :   4067cb: retq
    0.00 :   4067cc: nopl   0x0(%rax)
         :            base += half;
   21.45 :   4067d0: add    %r8,%rsi
         :            len = len - half;
   10.12 :   4067d3: sub    %edx,%eax
    0.08 :   4067d5: jmp    4067a7 <std::optional<std::reference_wrapper<int const> > binary_search_opt1_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x37>
 Percent |	Source code & Disassembly of binary_search for cycles:u (2403 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406bb0 <std::optional<std::reference_wrapper<int const> > binary_search_std<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z17binary_search_stdILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            return std::nullopt;
         :            }
         :
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_std(const VecType<Aligned> & elements, int32_t target) {
    0.96 :   406bb0: push   %rbp
    0.00 :   406bb1: mov    %rdi,%rax
    0.00 :   406bb4: mov    %esi,%edi
    0.00 :   406bb6: mov    %rsp,%rbp
    0.00 :   406bb9: and    $0xffffffffffffffe0,%rsp
         :            _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
         :            : _M_current(_Iterator()) { }
         :
         :            explicit _GLIBCXX20_CONSTEXPR
         :            __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
         :            : _M_current(__i) { }
    0.00 :   406bbd: mov    0x8(%rax),%r8
    0.00 :   406bc1: mov    (%rax),%rsi
         :            _GLIBCXX20_CONSTEXPR
         :            inline typename __normal_iterator<_Iterator, _Container>::difference_type
         :            operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         :            const __normal_iterator<_Iterator, _Container>& __rhs)
         :            _GLIBCXX_NOEXCEPT
         :            { return __lhs.base() - __rhs.base(); }
    0.62 :   406bc4: mov    %r8,%rax
    0.00 :   406bc7: sub    %rsi,%rax
    0.00 :   406bca: sar    $0x2,%rax
    0.00 :   406bce: xchg   %ax,%ax
         :            typedef typename iterator_traits<_ForwardIterator>::difference_type
         :            _DistanceType;
         :
         :            _DistanceType __len = std::distance(__first, __last);
         :
         :            while (__len > 0)
    3.70 :   406bd0: test   %rax,%rax
    0.00 :   406bd3: jle    406bf3 <std::optional<std::reference_wrapper<int const> > binary_search_std<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x43>
         :            {
         :            _DistanceType __half = __len >> 1;
    9.03 :   406bd5: mov    %rax,%rdx
    0.37 :   406bd8: sar    %rdx
         :            { _M_current += __n; return *this; }
    2.96 :   406bdb: lea    (%rsi,%rdx,4),%rcx
         :            _ForwardIterator __middle = __first;
         :            std::advance(__middle, __half);
         :            if (__comp(__middle, __val))
    6.16 :   406bdf: cmp    %edi,(%rcx)
    0.00 :   406be1: jge    406c18 <std::optional<std::reference_wrapper<int const> > binary_search_std<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x68>
         :            {
         :            __first = __middle;
         :            ++__first;
         :            __len = __len - __half - 1;
   22.64 :   406be3: sub    %rdx,%rax
         :            ++_M_current;
   11.15 :   406be6: lea    0x4(%rcx),%rsi
    0.00 :   406bea: sub    $0x1,%rax
         :            while (__len > 0)
    3.58 :   406bee: test   %rax,%rax
    0.00 :   406bf1: jg     406bd5 <std::optional<std::reference_wrapper<int const> > binary_search_std<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x25>
         :            auto it = std::lower_bound(elements.begin(), elements.end(), target);
         :            if(it == elements.end()) {
         :            return std::nullopt;
    1.75 :   406bf3: xor    %eax,%eax
         :            if(it == elements.end()) {
    0.21 :   406bf5: cmp    %r8,%rsi
    0.00 :   406bf8: je     406c04 <std::optional<std::reference_wrapper<int const> > binary_search_std<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x54>
         :            }
         :            return *it;
    1.21 :   406bfa: mov    %rsi,-0x10(%rsp)
    1.25 :   406bff: mov    $0x1,%eax
    0.12 :   406c04: mov    %al,-0x8(%rsp)
         :            }
    0.54 :   406c08: mov    -0x10(%rsp),%rax
    2.66 :   406c0d: mov    -0x8(%rsp),%rdx
    7.16 :   406c12: leaveq
    0.00 :   406c13: retq
    0.00 :   406c14: nopl   0x0(%rax)
         :            _DistanceType __half = __len >> 1;
   22.64 :   406c18: mov    %rdx,%rax
    1.29 :   406c1b: jmp    406bd0 <std::optional<std::reference_wrapper<int const> > binary_search_std<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x20>
 Percent |	Source code & Disassembly of binary_search for cycles:u (1517 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004066f0 <std::optional<std::reference_wrapper<int const> > binary_search_baseline<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z22binary_search_baselineILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            template <typename T>
         :            using OptRef = std::optional<std::reference_wrapper<T>>;
         :
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_baseline(const VecType<Aligned> & elements, int32_t target) {
    1.58 :   4066f0: push   %rbp
    0.00 :   4066f1: mov    %rsp,%rbp
    0.00 :   4066f4: and    $0xffffffffffffffe0,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4066f8: mov    (%rdi),%r8
    0.00 :   4066fb: mov    0x8(%rdi),%rdx
    0.00 :   4066ff: sub    %r8,%rdx
    0.00 :   406702: sar    $0x2,%rdx
         :            int l = 0, r = elements.size() - 1;
         :            while (l <= r) {
    0.92 :   406706: sub    $0x1,%edx
    0.00 :   406709: js     406729 <std::optional<std::reference_wrapper<int const> > binary_search_baseline<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x39>
    0.00 :   40670b: mov    %esi,%edi
         :            int l = 0, r = elements.size() - 1;
    0.00 :   40670d: xor    %ecx,%ecx
    0.00 :   40670f: nop
         :            int m = (l + r) / 2;
    2.31 :   406710: lea    (%rdx,%rcx,1),%eax
    0.99 :   406713: sar    %eax
         :            if (elements[m] == target) {
    1.58 :   406715: movslq %eax,%rsi
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    1.45 :   406718: lea    (%r8,%rsi,4),%rsi
    1.19 :   40671c: cmp    %edi,(%rsi)
    0.00 :   40671e: je     406757 <std::optional<std::reference_wrapper<int const> > binary_search_baseline<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x67>
         :            return elements[m];
         :            }
         :            else if (elements[m] < target) {
   15.03 :   406720: jge    406740 <std::optional<std::reference_wrapper<int const> > binary_search_baseline<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x50>
         :            l = m + 1;
   11.54 :   406722: lea    0x1(%rax),%ecx
         :            while (l <= r) {
    6.92 :   406725: cmp    %edx,%ecx
    0.00 :   406727: jle    406710 <std::optional<std::reference_wrapper<int const> > binary_search_baseline<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x20>
         :            }
         :            else {
         :            r = m - 1;
         :            }
         :            }
         :            return std::nullopt;
    0.00 :   406729: movb   $0x0,-0x8(%rsp)
         :            }
    0.00 :   40672e: mov    -0x10(%rsp),%rax
    0.00 :   406733: mov    -0x8(%rsp),%rdx
    0.00 :   406738: leaveq
    0.00 :   406739: retq
    0.00 :   40673a: nopw   0x0(%rax,%rax,1)
         :            r = m - 1;
   11.60 :   406740: lea    -0x1(%rax),%edx
         :            while (l <= r) {
    9.23 :   406743: cmp    %ecx,%edx
    0.00 :   406745: jl     406729 <std::optional<std::reference_wrapper<int const> > binary_search_baseline<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x39>
         :            int m = (l + r) / 2;
    2.37 :   406747: lea    (%rdx,%rcx,1),%eax
    0.00 :   40674a: sar    %eax
         :            if (elements[m] == target) {
    1.45 :   40674c: movslq %eax,%rsi
    1.58 :   40674f: lea    (%r8,%rsi,4),%rsi
    1.05 :   406753: cmp    %edi,(%rsi)
    0.00 :   406755: jne    406720 <std::optional<std::reference_wrapper<int const> > binary_search_baseline<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x30>
         :            return elements[m];
    6.53 :   406757: mov    %rsi,-0x10(%rsp)
         :            }
    5.14 :   40675c: mov    -0x10(%rsp),%rax
         :            return elements[m];
    3.56 :   406761: movb   $0x1,-0x8(%rsp)
         :            }
    0.00 :   406766: mov    -0x8(%rsp),%rdx
   13.97 :   40676b: leaveq
    0.00 :   40676c: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (1441 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406e40 <std::optional<std::reference_wrapper<int const> > binary_search_opt9_branch_removal<8, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z33binary_search_opt9_branch_removalILi8ELb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT0_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            /**
         :            * @param elements_eytzinger Assume this array is 1-indexed.
         :            */
         :            template <int32_t PrefetchStrideInElements, bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt9_branch_removal(const VecType<Aligned> & elements_eytzinger, int32_t target) {
    1.39 :   406e40: push   %rbp
    0.00 :   406e41: mov    %rdi,%rax
    0.00 :   406e44: mov    %esi,%edi
         :            __lg(long __n)
         :            { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }
         :
         :            inline _GLIBCXX_CONSTEXPR unsigned long
         :            __lg(unsigned long __n)
         :            { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }
    0.00 :   406e46: mov    $0x3f,%r8d
    0.00 :   406e4c: mov    %rsp,%rbp
    0.00 :   406e4f: and    $0xffffffffffffffe0,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   406e53: mov    (%rax),%rsi
    0.76 :   406e56: mov    0x8(%rax),%r9
    0.00 :   406e5a: sub    %rsi,%r9
    0.00 :   406e5d: sar    $0x2,%r9
    0.00 :   406e61: bsr    %r9,%rax
    0.00 :   406e65: xor    $0x3f,%rax
    0.00 :   406e69: sub    %eax,%r8d
         :            int32_t iters = std::__lg(elements_eytzinger.size());
         :            int32_t k = 1;
         :            for(int32_t i = 0; i < iters; i++) {
    0.00 :   406e6c: test   %r8d,%r8d
    0.00 :   406e6f: jle    406f00 <std::optional<std::reference_wrapper<int const> > binary_search_opt9_branch_removal<8, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0xc0>
    0.00 :   406e75: xor    %ecx,%ecx
         :            int32_t k = 1;
    0.28 :   406e77: mov    $0x1,%edx
    0.00 :   406e7c: nopl   0x0(%rax)
         :            __builtin_prefetch(elements_eytzinger.data() + k * PrefetchStrideInElements * sizeof(int32_t));
    2.64 :   406e80: lea    0x0(,%rdx,8),%eax
    1.39 :   406e87: cltq
    4.09 :   406e89: shl    $0x4,%rax
    1.94 :   406e8d: prefetcht0 (%rsi,%rax,1)
         :            k = 2 * k + (elements_eytzinger[k] < target);
   55.46 :   406e91: movslq %edx,%rax
    0.00 :   406e94: cmp    %edi,(%rsi,%rax,4)
    3.19 :   406e97: setl   %al
         :            for(int32_t i = 0; i < iters; i++) {
    2.15 :   406e9a: add    $0x1,%ecx
         :            k = 2 * k + (elements_eytzinger[k] < target);
    0.00 :   406e9d: movzbl %al,%eax
    3.61 :   406ea0: lea    (%rax,%rdx,2),%edx
         :            for(int32_t i = 0; i < iters; i++) {
    1.73 :   406ea3: cmp    %r8d,%ecx
    0.00 :   406ea6: jne    406e80 <std::optional<std::reference_wrapper<int const> > binary_search_opt9_branch_removal<8, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x40>
         :            }
         :            // We remove the last round in the loop
         :            // and use a "cmove" like operation
         :            // because the last round is more possible to lead to branch miss
         :            int32_t val = (k < elements_eytzinger.size() ? elements_eytzinger[k] : 0);
    0.97 :   406ea8: movslq %edx,%rcx
         :            k = 2 * k + (val < target);
    0.00 :   406eab: add    %edx,%edx
         :            int32_t val = (k < elements_eytzinger.size() ? elements_eytzinger[k] : 0);
    0.00 :   406ead: xor    %eax,%eax
    0.00 :   406eaf: cmp    %rcx,%r9
    0.00 :   406eb2: jbe    406eb7 <std::optional<std::reference_wrapper<int const> > binary_search_opt9_branch_removal<8, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x77>
    0.28 :   406eb4: mov    (%rsi,%rcx,4),%eax
         :            k = 2 * k + (val < target);
    0.28 :   406eb7: cmp    %edi,%eax
    0.00 :   406eb9: setl   %al
    0.07 :   406ebc: movzbl %al,%eax
    0.28 :   406ebf: add    %eax,%edx
         :
         :            k >>= __builtin_ffs(~k);
    0.62 :   406ec1: mov    $0xffffffff,%eax
    0.00 :   406ec6: mov    %edx,%ecx
    0.00 :   406ec8: not    %ecx
    0.07 :   406eca: bsf    %ecx,%ecx
    1.11 :   406ecd: cmove  %eax,%ecx
         :            if(elements_eytzinger[k] != target) {
         :            return std::nullopt;
    0.21 :   406ed0: xor    %eax,%eax
         :            k >>= __builtin_ffs(~k);
    0.00 :   406ed2: add    $0x1,%ecx
    0.34 :   406ed5: sar    %cl,%edx
         :            if(elements_eytzinger[k] != target) {
    0.69 :   406ed7: movslq %edx,%rdx
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.21 :   406eda: lea    (%rsi,%rdx,4),%rdx
    0.28 :   406ede: cmp    %edi,(%rdx)
    0.00 :   406ee0: jne    406eec <std::optional<std::reference_wrapper<int const> > binary_search_opt9_branch_removal<8, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0xac>
         :            }
         :            return elements_eytzinger[k];
    2.15 :   406ee2: mov    %rdx,-0x10(%rsp)
    0.00 :   406ee7: mov    $0x1,%eax
    0.00 :   406eec: mov    %al,-0x8(%rsp)
    0.00 :   406ef0: mov    -0x10(%rsp),%rax
    0.62 :   406ef5: mov    -0x8(%rsp),%rdx
   13.19 :   406efa: leaveq
    0.00 :   406efb: retq
    0.00 :   406efc: nopl   0x0(%rax)
         :            for(int32_t i = 0; i < iters; i++) {
    0.00 :   406f00: mov    $0x2,%edx
    0.00 :   406f05: mov    $0x1,%ecx
    0.00 :   406f0a: jmp    406ead <std::optional<std::reference_wrapper<int const> > binary_search_opt9_branch_removal<8, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x6d>
 Percent |	Source code & Disassembly of binary_search for cycles:u (1280 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406d30 <std::optional<std::reference_wrapper<int const> > binary_search_opt6_eytzinger_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z39binary_search_opt6_eytzinger_branchlessILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            /**
         :            * @param elements_eytzinger Assume this array is 1-indexed.
         :            */
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt6_eytzinger_branchless(const VecType<Aligned> & elements_eytzinger, int32_t target) {
    2.11 :   406d30: push   %rbp
    0.00 :   406d31: mov    %rdi,%rax
    0.00 :   406d34: mov    %esi,%edi
    0.00 :   406d36: mov    %rsp,%rbp
    0.00 :   406d39: and    $0xffffffffffffffe0,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   406d3d: mov    (%rax),%rsi
    0.00 :   406d40: mov    0x8(%rax),%rax
    0.70 :   406d44: sub    %rsi,%rax
    0.00 :   406d47: mov    %rax,%rcx
    0.00 :   406d4a: sar    $0x2,%rcx
         :            int32_t k = 1;
         :            while(k < elements_eytzinger.size()) {
    0.00 :   406d4e: cmp    $0x4,%rax
    0.00 :   406d52: jbe    406d8e <std::optional<std::reference_wrapper<int const> > binary_search_opt6_eytzinger_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x5e>
         :            int32_t k = 1;
    0.00 :   406d54: mov    $0x1,%eax
         :            while(k < elements_eytzinger.size()) {
    0.00 :   406d59: mov    $0x1,%edx
    0.00 :   406d5e: xchg   %ax,%ax
         :            // avoid branch. But also leads to a problem:
         :            // We don't know which k leads to the target value!
         :            k = 2 * k + (elements_eytzinger[k] < target);
    9.68 :   406d60: cmp    %edi,(%rsi,%rdx,4)
   31.40 :   406d63: setl   %dl
    6.72 :   406d66: movzbl %dl,%edx
    6.02 :   406d69: lea    (%rdx,%rax,2),%eax
         :            while(k < elements_eytzinger.size()) {
    4.76 :   406d6c: movslq %eax,%rdx
    6.17 :   406d6f: cmp    %rcx,%rdx
    0.00 :   406d72: jb     406d60 <std::optional<std::reference_wrapper<int const> > binary_search_opt6_eytzinger_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x30>
         :            // at this round "(elements_eytzinger[k] < target) == 0", we will go left
         :            // But at the following rounds we must go right since in the left sub-tree of the target node
         :            // there's nothing larger than the target.
         :            // So the pattern of the final steps is : one step left, multiple steps right.
         :            // Therefore we can count the trailing ones to get back the matched "k".
         :            k >>= __builtin_ffs(~k);
    1.88 :   406d74: mov    %eax,%ecx
    0.08 :   406d76: mov    $0xffffffff,%edx
    1.02 :   406d7b: not    %ecx
    0.63 :   406d7d: bsf    %ecx,%ecx
    2.73 :   406d80: cmove  %edx,%ecx
    1.02 :   406d83: add    $0x1,%ecx
    1.41 :   406d86: sar    %cl,%eax
         :            // for each iteration, the binary representation of k is appended with "bit 0" if we go left
         :            // and appended with "bit 1" if we go right.
         :            // And we need to get rid of the redundant bits since "k" matches the target.
         :            // Then we use __builtin_ffs to find the first 1 from the LSB in "~k".
         :            // And we right shift "k" by that value to retrieve the answer.
         :            if(elements_eytzinger[k] != target) {
    1.80 :   406d88: cltq
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   406d8a: lea    (%rsi,%rax,4),%rsi
         :            return std::nullopt;
    1.25 :   406d8e: xor    %eax,%eax
         :            if(elements_eytzinger[k] != target) {
    0.00 :   406d90: cmp    %edi,(%rsi)
    0.00 :   406d92: jne    406d9e <std::optional<std::reference_wrapper<int const> > binary_search_opt6_eytzinger_branchless<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x6e>
         :            }
         :            return elements_eytzinger[k];
    5.70 :   406d94: mov    %rsi,-0x10(%rsp)
    0.00 :   406d99: mov    $0x1,%eax
    0.00 :   406d9e: mov    %al,-0x8(%rsp)
         :            }
    0.00 :   406da2: mov    -0x10(%rsp),%rax
    0.78 :   406da7: mov    -0x8(%rsp),%rdx
   14.14 :   406dac: leaveq
    0.00 :   406dad: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (1243 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406db0 <std::optional<std::reference_wrapper<int const> > binary_search_opt8_eytzinger_prefetch2<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z38binary_search_opt8_eytzinger_prefetch2ILi4ELb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT0_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            /**
         :            * @param elements_eytzinger Assume this array is 1-indexed.
         :            */
         :            template <int32_t PrefetchStrideInElements, bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt8_eytzinger_prefetch2(const VecType<Aligned> & elements_eytzinger, int32_t target) {
    2.09 :   406db0: push   %rbp
    0.00 :   406db1: mov    %rdi,%rax
    0.00 :   406db4: mov    %esi,%edi
    0.00 :   406db6: mov    %rsp,%rbp
    0.00 :   406db9: and    $0xffffffffffffffe0,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   406dbd: mov    (%rax),%rsi
    0.00 :   406dc0: mov    0x8(%rax),%rax
    1.05 :   406dc4: sub    %rsi,%rax
    0.00 :   406dc7: mov    %rax,%r8
    0.00 :   406dca: sar    $0x2,%r8
         :            int32_t k = 1;
         :            while(k < elements_eytzinger.size()) {
    0.00 :   406dce: cmp    $0x4,%rax
    0.00 :   406dd2: jbe    406e1f <std::optional<std::reference_wrapper<int const> > binary_search_opt8_eytzinger_prefetch2<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x6f>
         :            int32_t k = 1;
    0.00 :   406dd4: mov    $0x1,%edx
         :            while(k < elements_eytzinger.size()) {
    0.00 :   406dd9: mov    $0x1,%ecx
    0.00 :   406dde: xchg   %ax,%ax
         :            __builtin_prefetch(elements_eytzinger.data() + k * PrefetchStrideInElements * sizeof(int32_t));
    2.25 :   406de0: lea    0x0(,%rdx,4),%eax
    4.82 :   406de7: cltq
    0.89 :   406de9: shl    $0x4,%rax
    3.14 :   406ded: prefetcht0 (%rsi,%rax,1)
         :            k = 2 * k + (elements_eytzinger[k] < target);
   54.14 :   406df1: xor    %eax,%eax
    0.89 :   406df3: cmp    %edi,(%rsi,%rcx,4)
    2.01 :   406df6: setl   %al
    2.33 :   406df9: lea    (%rax,%rdx,2),%edx
         :            while(k < elements_eytzinger.size()) {
    2.25 :   406dfc: movslq %edx,%rcx
    1.77 :   406dff: cmp    %r8,%rcx
    0.00 :   406e02: jb     406de0 <std::optional<std::reference_wrapper<int const> > binary_search_opt8_eytzinger_prefetch2<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x30>
         :            }
         :            k >>= __builtin_ffs(~k);
    0.64 :   406e04: mov    %edx,%ecx
    0.72 :   406e06: mov    $0xffffffff,%eax
    0.00 :   406e0b: not    %ecx
    0.00 :   406e0d: bsf    %ecx,%ecx
    0.16 :   406e10: cmove  %eax,%ecx
    0.16 :   406e13: add    $0x1,%ecx
    0.08 :   406e16: sar    %cl,%edx
         :            if(elements_eytzinger[k] != target) {
    0.32 :   406e18: movslq %edx,%rdx
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.64 :   406e1b: lea    (%rsi,%rdx,4),%rsi
         :            return std::nullopt;
    0.16 :   406e1f: xor    %eax,%eax
         :            if(elements_eytzinger[k] != target) {
    0.00 :   406e21: cmp    %edi,(%rsi)
    0.00 :   406e23: jne    406e2f <std::optional<std::reference_wrapper<int const> > binary_search_opt8_eytzinger_prefetch2<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x7f>
         :            }
         :            return elements_eytzinger[k];
    0.08 :   406e25: mov    %rsi,-0x10(%rsp)
    0.00 :   406e2a: mov    $0x1,%eax
    0.08 :   406e2f: mov    %al,-0x8(%rsp)
         :            }
    0.00 :   406e33: mov    -0x10(%rsp),%rax
    0.40 :   406e38: mov    -0x8(%rsp),%rdx
   18.90 :   406e3d: leaveq
    0.00 :   406e3e: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (954 samples, percent: local period)
------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406c20 <std::optional<std::reference_wrapper<int const> > binary_search_opt4_prefetch<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z27binary_search_opt4_prefetchILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            return *base;
         :            }
         :
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt4_prefetch(const VecType<Aligned> & elements, int32_t target) {
    2.73 :   406c20: push   %rbp
    0.00 :   406c21: mov    %esi,%r8d
    0.00 :   406c24: mov    %rsp,%rbp
    0.00 :   406c27: and    $0xffffffffffffffe0,%rsp
         :            data() _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
         :
         :            const _Tp*
         :            data() const _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
    0.00 :   406c2b: mov    (%rdi),%rdx
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   406c2e: mov    0x8(%rdi),%rax
    0.00 :   406c32: sub    %rdx,%rax
    1.36 :   406c35: sar    $0x2,%rax
         :            const int32_t * base = elements.data();
         :            int32_t len = elements.size();
         :            while (len > 1) {
    0.00 :   406c39: cmp    $0x1,%eax
    0.00 :   406c3c: jle    406c79 <std::optional<std::reference_wrapper<int const> > binary_search_opt4_prefetch<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x59>
    0.00 :   406c3e: mov    %eax,%ecx
         :            int32_t half = len / 2;
         :            __builtin_prefetch(&base[len / 2 - 1]);
         :            __builtin_prefetch(&base[half + len / 2 - 1]);
         :            base += (*(base + half - 1) < target) * half;
    0.00 :   406c40: xor    %r9d,%r9d
    0.00 :   406c43: nopl   0x0(%rax,%rax,1)
         :            int32_t half = len / 2;
    0.84 :   406c48: mov    %ecx,%eax
    0.63 :   406c4a: sar    %eax
         :            __builtin_prefetch(&base[len / 2 - 1]);
    1.15 :   406c4c: movslq %eax,%rsi
    6.60 :   406c4f: lea    -0x4(%rdx,%rsi,4),%rdi
         :            __builtin_prefetch(&base[half + len / 2 - 1]);
    1.99 :   406c54: lea    (%rax,%rax,1),%esi
    2.20 :   406c57: movslq %esi,%rsi
         :            base += (*(base + half - 1) < target) * half;
    2.52 :   406c5a: cmp    %r8d,(%rdi)
         :            __builtin_prefetch(&base[len / 2 - 1]);
   25.05 :   406c5d: prefetcht0 (%rdi)
         :            __builtin_prefetch(&base[half + len / 2 - 1]);
    1.15 :   406c60: prefetcht0 -0x4(%rdx,%rsi,4)
         :            base += (*(base + half - 1) < target) * half;
    1.05 :   406c65: mov    %r9d,%esi
    1.47 :   406c68: cmovl  %eax,%esi
         :            len -= half;
    6.81 :   406c6b: sub    %eax,%ecx
         :            base += (*(base + half - 1) < target) * half;
    2.73 :   406c6d: movslq %esi,%rsi
    7.13 :   406c70: lea    (%rdx,%rsi,4),%rdx
         :            while (len > 1) {
    5.66 :   406c74: cmp    $0x1,%ecx
    0.00 :   406c77: jg     406c48 <std::optional<std::reference_wrapper<int const> > binary_search_opt4_prefetch<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x28>
         :            }
         :            if (*base != target) {
         :            return std::nullopt;
    0.00 :   406c79: xor    %eax,%eax
         :            if (*base != target) {
    0.00 :   406c7b: cmp    %r8d,(%rdx)
    0.00 :   406c7e: jne    406c8a <std::optional<std::reference_wrapper<int const> > binary_search_opt4_prefetch<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x6a>
         :            }
         :            return *base;
    7.65 :   406c80: mov    %rdx,-0x10(%rsp)
    0.00 :   406c85: mov    $0x1,%eax
    0.00 :   406c8a: mov    %al,-0x8(%rsp)
         :            }
    0.00 :   406c8e: mov    -0x10(%rsp),%rax
    1.57 :   406c93: mov    -0x8(%rsp),%rdx
   19.71 :   406c98: leaveq
    0.00 :   406c99: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (922 samples, percent: local period)
------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406ca0 <std::optional<std::reference_wrapper<int const> > binary_search_opt7_eytzinger_prefetch1<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z38binary_search_opt7_eytzinger_prefetch1ILi4ELb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT0_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            /**
         :            * @param elements_eytzinger Assume this array is 1-indexed.
         :            */
         :            template <int32_t PrefetchStrideInElements, bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt7_eytzinger_prefetch1(const VecType<Aligned> & elements_eytzinger, int32_t target) {
    2.71 :   406ca0: push   %rbp
    0.00 :   406ca1: mov    %rdi,%rax
    0.00 :   406ca4: mov    %rsp,%rbp
    0.00 :   406ca7: and    $0xffffffffffffffe0,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   406cab: mov    (%rdi),%rdi
    0.00 :   406cae: mov    0x8(%rax),%rax
    0.00 :   406cb2: sub    %rdi,%rax
    1.73 :   406cb5: mov    %rax,%r8
    0.00 :   406cb8: sar    $0x2,%r8
         :            int32_t k = 1;
         :            while(k < elements_eytzinger.size()) {
    0.00 :   406cbc: cmp    $0x4,%rax
    0.00 :   406cc0: jbe    406d18 <std::optional<std::reference_wrapper<int const> > binary_search_opt7_eytzinger_prefetch1<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x78>
    0.11 :   406cc2: mov    $0x1,%edx
    0.00 :   406cc7: mov    $0x1,%ecx
    0.00 :   406ccc: jmp    406ce1 <std::optional<std::reference_wrapper<int const> > binary_search_opt7_eytzinger_prefetch1<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x41>
    0.00 :   406cce: xchg   %ax,%ax
         :            __builtin_prefetch(elements_eytzinger.data() + k * PrefetchStrideInElements * sizeof(int32_t));
         :            if(elements_eytzinger[k] == target) {
         :            return elements_eytzinger[k];
         :            }
         :            if(elements_eytzinger[k] < target) {
         :            k = 2 * k + 1;
    1.95 :   406cd0: setl   %al
    4.88 :   406cd3: movzbl %al,%eax
    5.75 :   406cd6: lea    (%rax,%rdx,2),%edx
         :            while(k < elements_eytzinger.size()) {
    3.47 :   406cd9: movslq %edx,%rcx
    4.99 :   406cdc: cmp    %r8,%rcx
    0.00 :   406cdf: jae    406d18 <std::optional<std::reference_wrapper<int const> > binary_search_opt7_eytzinger_prefetch1<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x78>
         :            __builtin_prefetch(elements_eytzinger.data() + k * PrefetchStrideInElements * sizeof(int32_t));
    4.56 :   406ce1: lea    0x0(,%rdx,4),%eax
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    3.36 :   406ce8: lea    (%rdi,%rcx,4),%rcx
    0.11 :   406cec: cltq
    1.19 :   406cee: shl    $0x4,%rax
    3.80 :   406cf2: prefetcht0 (%rdi,%rax,1)
         :            if(elements_eytzinger[k] == target) {
   24.30 :   406cf6: mov    (%rcx),%eax
    0.00 :   406cf8: cmp    %esi,%eax
    0.00 :   406cfa: jne    406cd0 <std::optional<std::reference_wrapper<int const> > binary_search_opt7_eytzinger_prefetch1<4, true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x30>
         :            return elements_eytzinger[k];
    4.34 :   406cfc: mov    %rcx,-0x10(%rsp)
         :            } else {
         :            k = 2 * k;
         :            }
         :            }
         :            return std::nullopt;
         :            }
    6.94 :   406d01: mov    -0x10(%rsp),%rax
         :            return elements_eytzinger[k];
    4.12 :   406d06: movb   $0x1,-0x8(%rsp)
         :            }
    0.00 :   406d0b: mov    -0x8(%rsp),%rdx
   21.69 :   406d10: leaveq
    0.00 :   406d11: retq
    0.00 :   406d12: nopw   0x0(%rax,%rax,1)
         :            return std::nullopt;
    0.00 :   406d18: movb   $0x0,-0x8(%rsp)
         :            }
    0.00 :   406d1d: mov    -0x10(%rsp),%rax
    0.00 :   406d22: mov    -0x8(%rsp),%rdx
    0.00 :   406d27: leaveq
    0.00 :   406d28: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (866 samples, percent: local period)
------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            00000000004068c0 <std::optional<std::reference_wrapper<int const> > binary_search_opt5_eytzinger<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z28binary_search_opt5_eytzingerILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            /**
         :            * @param elements_eytzinger Assume this array is 1-indexed.
         :            */
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt5_eytzinger(const VecType<Aligned> & elements_eytzinger, int32_t target) {
    3.12 :   4068c0: push   %rbp
    0.00 :   4068c1: mov    %rdi,%rax
    0.00 :   4068c4: mov    %rsp,%rbp
    0.00 :   4068c7: and    $0xffffffffffffffe0,%rsp
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   4068cb: mov    (%rdi),%rdi
    0.00 :   4068ce: mov    0x8(%rax),%rcx
    0.00 :   4068d2: sub    %rdi,%rcx
    1.73 :   4068d5: mov    %rcx,%r8
    0.00 :   4068d8: sar    $0x2,%r8
         :            int32_t k = 1;
         :            while(k < elements_eytzinger.size()) {
    0.00 :   4068dc: cmp    $0x4,%rcx
    0.00 :   4068e0: jbe    406928 <std::optional<std::reference_wrapper<int const> > binary_search_opt5_eytzinger<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x68>
    0.00 :   4068e2: mov    $0x1,%edx
    0.00 :   4068e7: mov    $0x1,%eax
    0.00 :   4068ec: jmp    406901 <std::optional<std::reference_wrapper<int const> > binary_search_opt5_eytzinger<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x41>
    0.00 :   4068ee: xchg   %ax,%ax
         :            if(elements_eytzinger[k] == target) {
         :            return elements_eytzinger[k];
         :            }
         :            if(elements_eytzinger[k] < target) {
         :            k = 2 * k + 1;
    5.20 :   4068f0: setl   %al
    5.31 :   4068f3: movzbl %al,%eax
    4.51 :   4068f6: lea    (%rax,%rdx,2),%edx
         :            while(k < elements_eytzinger.size()) {
    3.35 :   4068f9: movslq %edx,%rax
    2.42 :   4068fc: cmp    %r8,%rax
    0.00 :   4068ff: jae    406928 <std::optional<std::reference_wrapper<int const> > binary_search_opt5_eytzinger<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x68>
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    3.81 :   406901: lea    (%rdi,%rax,4),%rcx
         :            if(elements_eytzinger[k] == target) {
    0.00 :   406905: mov    (%rcx),%eax
   28.29 :   406907: cmp    %esi,%eax
    0.00 :   406909: jne    4068f0 <std::optional<std::reference_wrapper<int const> > binary_search_opt5_eytzinger<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x30>
         :            return elements_eytzinger[k];
    6.12 :   40690b: mov    %rcx,-0x10(%rsp)
         :            } else {
         :            k = 2 * k;
         :            }
         :            }
         :            return std::nullopt;
         :            }
    8.31 :   406910: mov    -0x10(%rsp),%rax
         :            return elements_eytzinger[k];
    2.31 :   406915: movb   $0x1,-0x8(%rsp)
         :            }
    0.35 :   40691a: mov    -0x8(%rsp),%rdx
   25.18 :   40691f: leaveq
    0.00 :   406920: retq
    0.00 :   406921: nopl   0x0(%rax)
         :            return std::nullopt;
    0.00 :   406928: movb   $0x0,-0x8(%rsp)
         :            }
    0.00 :   40692d: mov    -0x10(%rsp),%rax
    0.00 :   406932: mov    -0x8(%rsp),%rdx
    0.00 :   406937: leaveq
    0.00 :   406938: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (801 samples, percent: local period)
------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            0000000000406850 <std::optional<std::reference_wrapper<int const> > binary_search_opt3_branchless3<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)>:
         :            _Z30binary_search_opt3_branchless3ILb1EESt8optionalISt17reference_wrapperIKiEERKNSt11conditionalIXT_ESt6vectorIi16AlignedAllocatorIiEES6_IiSaIiEEE4typeEi():
         :            return *base;
         :            }
         :
         :            template <bool Aligned>
         :            __attribute__((noinline))
         :            OptRef<const int32_t> binary_search_opt3_branchless3(const VecType<Aligned> & elements, int32_t target) {
    1.75 :   406850: push   %rbp
    0.00 :   406851: mov    %rdi,%rax
    0.00 :   406854: mov    %esi,%edi
    0.00 :   406856: mov    %rsp,%rbp
    0.00 :   406859: and    $0xffffffffffffffe0,%rsp
         :            data() _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
         :
         :            const _Tp*
         :            data() const _GLIBCXX_NOEXCEPT
         :            { return _M_data_ptr(this->_M_impl._M_start); }
    0.00 :   40685d: mov    (%rax),%rsi
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   406860: mov    0x8(%rax),%rdx
    1.87 :   406864: sub    %rsi,%rdx
    0.00 :   406867: sar    $0x2,%rdx
         :            const int32_t * base = elements.data();
         :            int32_t len = elements.size();
         :            while (len > 1) {
    0.00 :   40686b: cmp    $0x1,%edx
    0.00 :   40686e: jle    406897 <std::optional<std::reference_wrapper<int const> > binary_search_opt3_branchless3<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x47>
    0.00 :   406870: mov    %edx,%eax
         :            int32_t half = len / 2;
         :            base += (*(base + half - 1) < target) * half;
    0.00 :   406872: xor    %r8d,%r8d
    0.00 :   406875: nopl   (%rax)
         :            int32_t half = len / 2;
    2.00 :   406878: mov    %eax,%edx
    3.75 :   40687a: sar    %edx
         :            base += (*(base + half - 1) < target) * half;
    3.99 :   40687c: movslq %edx,%rcx
    4.87 :   40687f: cmp    %edi,-0x4(%rsi,%rcx,4)
   20.60 :   406883: mov    %r8d,%ecx
    1.00 :   406886: cmovl  %edx,%ecx
         :            len -= half;
    7.12 :   406889: sub    %edx,%eax
         :            base += (*(base + half - 1) < target) * half;
    1.50 :   40688b: movslq %ecx,%rcx
    5.24 :   40688e: lea    (%rsi,%rcx,4),%rsi
         :            while (len > 1) {
    8.61 :   406892: cmp    $0x1,%eax
    0.00 :   406895: jg     406878 <std::optional<std::reference_wrapper<int const> > binary_search_opt3_branchless3<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x28>
         :            }
         :            if (*base != target) {
         :            return std::nullopt;
    0.00 :   406897: xor    %eax,%eax
         :            if (*base != target) {
    0.00 :   406899: cmp    %edi,(%rsi)
    0.00 :   40689b: jne    4068a7 <std::optional<std::reference_wrapper<int const> > binary_search_opt3_branchless3<true>(std::conditional<true, std::vector<int, AlignedAllocator<int> >, std::vector<int, std::allocator<int> > >::type const&, int)+0x57>
         :            }
         :            return *base;
   11.11 :   40689d: mov    %rsi,-0x10(%rsp)
    0.00 :   4068a2: mov    $0x1,%eax
    0.00 :   4068a7: mov    %al,-0x8(%rsp)
         :            }
    0.00 :   4068ab: mov    -0x10(%rsp),%rax
    1.62 :   4068b0: mov    -0x8(%rsp),%rdx
   24.97 :   4068b5: leaveq
    0.00 :   4068b6: retq
 Percent |	Source code & Disassembly of binary_search for cycles:u (490 samples, percent: local period)
------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000040a220 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)>:
         :            _Z16testBinarySearchILb0ERFSt8optionalISt17reference_wrapperIKiEERKSt6vectorIi16AlignedAllocatorIiEEiESt13unordered_mapIi13ElementsBlockILb1EESt4hashIiESt8equal_toIiESaISt4pairIS2_SF_EEEEdOT0_St17basic_string_viewIcSt11char_traitsIcEEiRKT1_():
         :            concept ElementBlockMapT = std::is_same_v<InputParam2ElementBlockMap<false>, T>
         :            || std::is_same_v<InputParam2ElementBlockMap<true>, T>;
         :
         :            // take the func_name as a parameter for debugging and correctness testing
         :            template <bool Transform = false, typename Func, ElementBlockMapT Map>
         :            double testBinarySearch(Func && func, std::string_view func_name, int32_t input_param,
    0.00 :   40a220: push   %rbp
         :
         :            /// Explicit specialization for short.
         :            _Cxx_hashtable_define_trivial_hash(short)
         :
         :            /// Explicit specialization for int.
         :            _Cxx_hashtable_define_trivial_hash(int)
    0.00 :   40a221: movslq %ecx,%rax
    0.00 :   40a224: mov    %rsp,%rbp
    0.00 :   40a227: push   %r15
    0.00 :   40a229: mov    %rdx,%r15
         :            typedef std::size_t result_type;
         :
         :            result_type
         :            operator()(first_argument_type __num,
         :            second_argument_type __den) const noexcept
         :            { return __num % __den; }
    0.00 :   40a22c: xor    %edx,%edx
    0.00 :   40a22e: push   %r14
    0.00 :   40a230: mov    %rdi,%r14
    0.00 :   40a233: push   %r13
    0.00 :   40a235: push   %r12
    0.00 :   40a237: push   %rbx
    0.00 :   40a238: and    $0xffffffffffffffe0,%rsp
    0.00 :   40a23c: sub    $0x160,%rsp
         :            _M_bucket_index(__node_type* __n) const noexcept
         :            { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
         :
         :            size_type
         :            _M_bucket_index(const key_type& __k, __hash_code __c) const
         :            { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
    0.00 :   40a243: mov    0x8(%r8),%rdi
    0.00 :   40a247: mov    %rsi,0x18(%rsp)
    0.00 :   40a24c: div    %rdi
         :            _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         :            _M_find_before_node(size_type __bkt, const key_type& __k,
         :            __hash_code __code) const
         :            -> __node_base*
         :            {
         :            __node_base* __prev_p = _M_buckets[__bkt];
    0.00 :   40a24f: mov    (%r8),%rax
    0.00 :   40a252: mov    (%rax,%rdx,8),%rax
         :            if (!__prev_p)
    0.00 :   40a256: test   %rax,%rax
    0.00 :   40a259: je     40a283 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x63>
         :            return nullptr;
         :
         :            for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    0.00 :   40a25b: mov    (%rax),%r13
    0.00 :   40a25e: mov    %rdx,%r9
         :            struct equal_to : public binary_function<_Tp, _Tp, bool>
         :            {
         :            _GLIBCXX14_CONSTEXPR
         :            bool
         :            operator()(const _Tp& __x, const _Tp& __y) const
         :            { return __x == __y; }
    0.00 :   40a261: mov    0x8(%r13),%esi
         :            {
         :            static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
         :            "key equality predicate must be invocable with two arguments of "
         :            "key type");
         :            return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)
         :            && _M_eq()(__k, this->_M_extract()(__n->_M_v()));
    0.00 :   40a265: cmp    %esi,%ecx
    0.00 :   40a267: je     40a290 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x70>
         :            __p = __p->_M_next())
         :            {
         :            if (this->_M_equals(__k, __code, __p))
         :            return __prev_p;
         :
         :            if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __bkt)
    0.00 :   40a269: mov    0x0(%r13),%r13
    0.00 :   40a26d: test   %r13,%r13
    0.00 :   40a270: je     40a283 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x63>
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
    0.00 :   40a272: movslq 0x8(%r13),%rax
         :            { return __num % __den; }
    0.00 :   40a276: xor    %edx,%edx
         :            { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
    0.00 :   40a278: mov    %rax,%rsi
         :            { return __num % __den; }
    0.00 :   40a27b: div    %rdi
    0.00 :   40a27e: cmp    %rdx,%r9
    0.00 :   40a281: je     40a265 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x45>
         :            __throw_out_of_range(__N("_Map_base::at"));
    0.00 :   40a283: mov    $0x41e3ab,%edi
    0.00 :   40a288: callq  4026b0 <std::__throw_out_of_range(char const*)@plt>
    0.00 :   40a28d: nopl   (%rax)
         :
         :            // [23.2.4.2] capacity
         :            /**  Returns the number of elements in the %vector.  */
         :            size_type
         :            size() const _GLIBCXX_NOEXCEPT
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   40a290: mov    0x18(%r13),%rbx
         :            : _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   40a294: vpxor  %xmm0,%xmm0,%xmm0
    0.00 :   40a298: vmovdqa %xmm0,0x40(%rsp)
         :            { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    0.00 :   40a29e: mov    %rbx,%r12
    0.00 :   40a2a1: sub    0x10(%r13),%r12
         :            : _M_start(), _M_finish(), _M_end_of_storage()
    0.00 :   40a2a5: movq   $0x0,0x50(%rsp)
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   40a2ae: je     40a4d5 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2b5>
         :            template <typename U>
         :            AlignedAllocator(const AlignedAllocator<U> &) {}
         :
         :            T * allocate(std::size_t n) {
         :            void * ptr = nullptr;
         :            if(posix_memalign(&ptr, 32, n * sizeof(T)) != 0) {
    0.00 :   40a2b4: mov    %r12,%rdx
    0.00 :   40a2b7: mov    $0x20,%esi
    0.00 :   40a2bc: lea    0x28(%rsp),%rdi
    0.00 :   40a2c1: callq  4024e0 <posix_memalign@plt>
    0.00 :   40a2c6: test   %eax,%eax
    0.00 :   40a2c8: jne    40a68f <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x46f>
    0.00 :   40a2ce: mov    0x28(%rsp),%rcx
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   40a2d3: add    %rcx,%r12
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   40a2d6: vmovq  %rcx,%xmm3
         :            this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    0.00 :   40a2db: mov    %r12,0x50(%rsp)
         :            _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
         :            : _M_current(_Iterator()) { }
         :
         :            explicit _GLIBCXX20_CONSTEXPR
         :            __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
         :            : _M_current(__i) { }
    0.00 :   40a2e0: mov    0x10(%r13),%rdx
         :            this->_M_impl._M_start = this->_M_allocate(__n);
    0.00 :   40a2e4: vpunpcklqdq %xmm3,%xmm3,%xmm0
    0.00 :   40a2e8: vmovdqa %xmm0,0x40(%rsp)
         :            {
         :            _ForwardIterator __cur = __result;
         :            __try
         :            {
         :            typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
         :            for (; __first != __last; ++__first, (void)++__cur)
    0.00 :   40a2ee: cmp    %rdx,%rbx
    0.00 :   40a2f1: je     40a3d8 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x1b8>
    0.00 :   40a2f7: lea    0x4(%rdx),%rdi
    0.00 :   40a2fb: mov    %rcx,%rsi
    0.00 :   40a2fe: lea    -0x4(%rbx),%rax
    0.00 :   40a302: sub    %rdi,%rsi
    0.00 :   40a305: sub    %rdx,%rax
    0.00 :   40a308: cmp    $0x18,%rsi
    0.00 :   40a30c: jbe    40a4dc <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2bc>
    0.00 :   40a312: cmp    $0x8,%rax
    0.00 :   40a316: jbe    40a4dc <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2bc>
    0.00 :   40a31c: mov    %rax,%r8
    0.00 :   40a31f: shr    $0x2,%r8
    0.00 :   40a323: lea    0x1(%r8),%rsi
    0.00 :   40a327: cmp    $0x18,%rax
    0.00 :   40a32b: jbe    40a504 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2e4>
    0.00 :   40a331: mov    %rsi,%rdi
    0.00 :   40a334: xor    %eax,%eax
    0.00 :   40a336: shr    $0x3,%rdi
    0.00 :   40a33a: shl    $0x5,%rdi
    0.00 :   40a33e: xchg   %ax,%ax
         :            template<typename _Tp, typename... _Args>
         :            constexpr auto
         :            construct_at(_Tp* __location, _Args&&... __args)
         :            noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
         :            -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
         :            { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
    0.00 :   40a340: vmovdqu (%rdx,%rax,1),%xmm1
    0.00 :   40a345: vinserti128 $0x1,0x10(%rdx,%rax,1),%ymm1,%ymm0
    0.00 :   40a34d: vmovdqa %ymm0,(%rcx,%rax,1)
    0.00 :   40a352: add    $0x20,%rax
    0.00 :   40a356: cmp    %rax,%rdi
    0.00 :   40a359: jne    40a340 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x120>
    0.00 :   40a35b: mov    %rsi,%rdi
    0.00 :   40a35e: and    $0xfffffffffffffff8,%rdi
    0.00 :   40a362: lea    0x0(,%rdi,4),%rax
    0.00 :   40a36a: lea    (%rdx,%rax,1),%r9
    0.00 :   40a36e: add    %rcx,%rax
    0.00 :   40a371: cmp    %rsi,%rdi
    0.00 :   40a374: je     40a4fc <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2dc>
    0.00 :   40a37a: vzeroupper
    0.00 :   40a37d: sub    %rdi,%r8
    0.00 :   40a380: sub    %rdi,%rsi
    0.00 :   40a383: cmp    $0x2,%r8
    0.00 :   40a387: jbe    40a3ad <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x18d>
    0.00 :   40a389: vmovdqu (%rdx,%rdi,4),%xmm2
    0.00 :   40a38e: vmovdqa %xmm2,(%rcx,%rdi,4)
    0.00 :   40a393: mov    %rsi,%rdi
    0.00 :   40a396: and    $0xfffffffffffffffc,%rdi
    0.00 :   40a39a: lea    0x0(,%rdi,4),%r8
    0.00 :   40a3a2: add    %r8,%r9
    0.00 :   40a3a5: add    %r8,%rax
    0.00 :   40a3a8: cmp    %rsi,%rdi
    0.00 :   40a3ab: je     40a3d2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x1b2>
    0.00 :   40a3ad: mov    (%r9),%esi
    0.00 :   40a3b0: mov    %esi,(%rax)
         :
         :            _GLIBCXX20_CONSTEXPR
         :            __normal_iterator&
         :            operator++() _GLIBCXX_NOEXCEPT
         :            {
         :            ++_M_current;
    0.00 :   40a3b2: lea    0x4(%r9),%rsi
    0.00 :   40a3b6: cmp    %rsi,%rbx
    0.00 :   40a3b9: je     40a3d2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x1b2>
    0.00 :   40a3bb: mov    0x4(%r9),%esi
    0.00 :   40a3bf: mov    %esi,0x4(%rax)
    0.00 :   40a3c2: lea    0x8(%r9),%rsi
    0.00 :   40a3c6: cmp    %rsi,%rbx
    0.00 :   40a3c9: je     40a3d2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x1b2>
    0.00 :   40a3cb: mov    0x8(%r9),%esi
    0.00 :   40a3cf: mov    %esi,0x8(%rax)
    0.00 :   40a3d2: sub    %rdx,%rbx
    0.00 :   40a3d5: add    %rbx,%rcx
         :            this->_M_impl._M_finish =
    0.00 :   40a3d8: mov    %rcx,0x48(%rsp)
         :            */
         :            const_reference
         :            operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         :            {
         :            __glibcxx_requires_subscript(__n);
         :            return *(this->_M_impl._M_start + __n);
    0.00 :   40a3dd: mov    0x28(%r13),%rax
    0.00 :   40a3e1: xor    %r12d,%r12d
    0.00 :   40a3e4: nopl   0x0(%rax)
         :            const std::vector<int32_t> & targets = elements_block.targets;
         :            if constexpr (Transform) {
         :            elements = eytzinger_transformation(elements);
         :            }
         :            for(int32_t i = 0; i < WarmupTimes; i++) {
         :            OptRef result = func(elements, targets[i]);
    0.00 :   40a3e8: mov    (%rax,%r12,1),%esi
    0.00 :   40a3ec: lea    0x40(%rsp),%rdi
    0.41 :   40a3f1: callq  *%r14
    0.00 :   40a3f4: mov    %rdx,%rbx
    0.00 :   40a3f7: mov    %rax,%rdx
    0.00 :   40a3fa: mov    %rbx,%rax
    0.00 :   40a3fd: mov    %rdx,0x30(%rsp)
    0.00 :   40a402: mov    %rdx,%rbx
    0.00 :   40a405: mov    %rax,0x38(%rsp)
         :            if(!result.has_value()) {
    0.20 :   40a40a: cmpb   $0x0,0x38(%rsp)
    0.00 :   40a40f: je     40a519 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2f9>
    0.00 :   40a415: mov    0x28(%r13),%rax
         :            _Z17doNotOptimizeAwayIRSt17reference_wrapperIKiEEvOT_():
         :            #include <nlohmann/json.hpp>
         :
         :            using json = nlohmann::json;
         :
         :            template <typename T> inline void doNotOptimizeAway(T&& datum) {
         :            asm volatile ("" : "+r" (datum));
    0.00 :   40a419: mov    %rbx,0x30(%rsp)
         :            _Z16testBinarySearchILb0ERFSt8optionalISt17reference_wrapperIKiEERKSt6vectorIi16AlignedAllocatorIiEEiESt13unordered_mapIi13ElementsBlockILb1EESt4hashIiESt8equal_toIiESaISt4pairIS2_SF_EEEEdOT0_St17basic_string_viewIcSt11char_traitsIcEEiRKT1_():
         :
         :            template<typename _Tp, typename _Up>
         :            constexpr auto
         :            operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
         :            -> __optional_ne_t<_Tp, _Up>
         :            { return !__lhs || *__lhs != __rhs; }
    0.00 :   40a41e: mov    (%rax,%r12,1),%ecx
    0.00 :   40a422: cmp    %ecx,(%rbx)
    0.00 :   40a424: jne    40a694 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x474>
         :            for(int32_t i = 0; i < WarmupTimes; i++) {
    0.00 :   40a42a: add    $0x4,%r12
    0.00 :   40a42e: cmp    $0x13880,%r12
    0.00 :   40a435: jne    40a3e8 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x1c8>
         :            if(result != targets[i]) {
         :            throw std::runtime_error("[testBinarySearch for " + std::string(func_name) + "] result is wrong. result is " +
         :            std::to_string(result.value()) + ", expected " + std::to_string(targets[i]));
         :            }
         :            }
         :            auto start_time = std::chrono::high_resolution_clock::now();
    0.00 :   40a437: callq  4023e0 <std::chrono::_V2::system_clock::now()@plt>
    0.00 :   40a43c: xor    %ebx,%ebx
    0.00 :   40a43e: mov    %rax,%r12
         :            for(int32_t i = 0; i < TestTimes; i++) {
    0.00 :   40a441: nopl   0x0(%rax)
         :            OptRef result = func(elements, targets[i]);
    0.20 :   40a448: mov    0x28(%r13),%rax
    0.00 :   40a44c: lea    0x40(%rsp),%rdi
    0.41 :   40a451: mov    (%rax,%rbx,1),%esi
    0.20 :   40a454: callq  *%r14
   13.67 :   40a457: mov    %rdx,0x148(%rsp)
         :            ? this->_M_get()
   17.75 :   40a45f: cmpb   $0x0,0x148(%rsp)
   56.53 :   40a467: mov    %rax,0x140(%rsp)
    0.00 :   40a46f: je     40a68a <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x46a>
         :            _Z17doNotOptimizeAwayIRSt17reference_wrapperIKiEEvOT_():
   10.41 :   40a475: mov    0x140(%rsp),%rax
         :            _Z16testBinarySearchILb0ERFSt8optionalISt17reference_wrapperIKiEERKSt6vectorIi16AlignedAllocatorIiEEiESt13unordered_mapIi13ElementsBlockILb1EESt4hashIiESt8equal_toIiESaISt4pairIS2_SF_EEEEdOT0_St17basic_string_viewIcSt11char_traitsIcEEiRKT1_():
         :            for(int32_t i = 0; i < TestTimes; i++) {
    0.20 :   40a47d: add    $0x4,%rbx
         :            _Z17doNotOptimizeAwayIRSt17reference_wrapperIKiEEvOT_():
    0.00 :   40a481: mov    %rax,0x140(%rsp)
         :            _Z16testBinarySearchILb0ERFSt8optionalISt17reference_wrapperIKiEERKSt6vectorIi16AlignedAllocatorIiEEiESt13unordered_mapIi13ElementsBlockILb1EESt4hashIiESt8equal_toIiESaISt4pairIS2_SF_EEEEdOT0_St17basic_string_viewIcSt11char_traitsIcEEiRKT1_():
    0.00 :   40a489: cmp    $0x2625a00,%rbx
    0.00 :   40a490: jne    40a448 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x228>
         :            doNotOptimizeAway(result.value());
         :            }
         :            auto end_time = std::chrono::high_resolution_clock::now();
    0.00 :   40a492: callq  4023e0 <std::chrono::_V2::system_clock::now()@plt>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   40a497: mov    0x40(%rsp),%rdi
         :            auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end_time - start_time);
         :            // std::cout << "Function '" << func_name << "' took " << duration.count() << " µs to complete." << std::endl;
         :            return duration.count() * 1.0 / TestTimes;
    0.00 :   40a49c: vxorps %xmm0,%xmm0,%xmm0
         :            const duration<_Rep2, _Period2>& __rhs)
         :            {
         :            typedef duration<_Rep1, _Period1>                       __dur1;
         :            typedef duration<_Rep2, _Period2>                       __dur2;
         :            typedef typename common_type<__dur1,__dur2>::type       __cd;
         :            return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    0.00 :   40a4a0: sub    %r12,%rax
    0.00 :   40a4a3: vcvtsi2sd %rax,%xmm0,%xmm0
    0.00 :   40a4a8: vdivsd 0x1ab30(%rip),%xmm0,%xmm0        # 424fe0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
         :            if (__p)
    0.00 :   40a4b0: test   %rdi,%rdi
    0.00 :   40a4b3: je     40a4c6 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2a6>
    0.00 :   40a4b5: vmovsd %xmm0,0x18(%rsp)
         :            }
         :            return static_cast<T *>(ptr);
         :            }
         :
         :            void deallocate(T * ptr, std::size_t n) {
         :            free(ptr);
    0.00 :   40a4bb: callq  402630 <free@plt>
    0.00 :   40a4c0: vmovsd 0x18(%rsp),%xmm0
         :            // std::cout << "result is " << result << std::endl;
         :            }
    0.00 :   40a4c6: lea    -0x28(%rbp),%rsp
    0.00 :   40a4ca: pop    %rbx
    0.00 :   40a4cb: pop    %r12
    0.00 :   40a4cd: pop    %r13
    0.00 :   40a4cf: pop    %r14
    0.00 :   40a4d1: pop    %r15
    0.00 :   40a4d3: pop    %rbp
    0.00 :   40a4d4: retq
         :            return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    0.00 :   40a4d5: xor    %ecx,%ecx
    0.00 :   40a4d7: jmpq   40a2d3 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0xb3>
    0.00 :   40a4dc: mov    %rbx,%rdi
    0.00 :   40a4df: xor    %eax,%eax
    0.00 :   40a4e1: sub    %rdx,%rdi
    0.00 :   40a4e4: nopl   0x0(%rax)
    0.00 :   40a4e8: mov    (%rdx,%rax,1),%esi
    0.00 :   40a4eb: mov    %esi,(%rcx,%rax,1)
    0.00 :   40a4ee: add    $0x4,%rax
    0.00 :   40a4f2: cmp    %rax,%rdi
    0.00 :   40a4f5: jne    40a4e8 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x2c8>
    0.00 :   40a4f7: jmpq   40a3d2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x1b2>
    0.00 :   40a4fc: vzeroupper
    0.00 :   40a4ff: jmpq   40a3d2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x1b2>
    0.00 :   40a504: mov    %rcx,%rax
    0.00 :   40a507: mov    %rdx,%r9
    0.00 :   40a50a: xor    %edi,%edi
    0.00 :   40a50c: jmpq   40a37d <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x15d>
         :            std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    0.00 :   40a511: mov    %rax,%r12
    0.00 :   40a514: jmpq   40a9f6 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x7d6>
         :            throw std::runtime_error("[testBinarySearch for " + std::string(func_name) + "] result is empty, expected " +
    0.00 :   40a519: mov    $0x10,%edi
    0.00 :   40a51e: lea    0x120(%rsp),%r14
    0.00 :   40a526: callq  4024d0 <__cxa_allocate_exception@plt>
    0.00 :   40a52b: mov    %r14,%rdi
    0.00 :   40a52e: mov    %rax,%rbx
    0.00 :   40a531: mov    0x28(%r13),%rax
    0.00 :   40a535: mov    (%rax,%r12,1),%esi
    0.00 :   40a539: callq  406fe0 <std::__cxx11::to_string(int)>
         :            *  has no special meaning.
         :            */
         :            basic_string(const _CharT* __s, size_type __n,
         :            const _Alloc& __a = _Alloc())
         :            : _M_dataplus(_M_local_data(), __a)
         :            { _M_construct(__s, __s + __n); }
    0.00 :   40a53e: mov    0x18(%rsp),%rdx
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   40a543: lea    0xc0(%rsp),%r12
    0.00 :   40a54b: lea    0xd0(%rsp),%rax
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   40a553: mov    %r15,%rsi
    0.00 :   40a556: mov    %r12,%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   40a559: mov    %rax,0xc0(%rsp)
         :            { _M_construct(__s, __s + __n); }
    0.00 :   40a561: add    %r15,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   40a564: callq  405530 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.0]>
    0.00 :   40a569: lea    0xe0(%rsp),%r13
    0.00 :   40a571: mov    %r12,%rdx
    0.00 :   40a574: mov    $0x41e3b9,%esi
    0.00 :   40a579: mov    %r13,%rdi
    0.00 :   40a57c: callq  408880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
    0.00 :   40a581: lea    0x100(%rsp),%r12
    0.00 :   40a589: mov    $0x41e3d0,%edx
    0.00 :   40a58e: mov    %r13,%rsi
    0.00 :   40a591: mov    %r12,%rdi
    0.00 :   40a594: callq  40a100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)>
    0.00 :   40a599: lea    0x140(%rsp),%r13
    0.00 :   40a5a1: mov    %r14,%rdx
    0.00 :   40a5a4: mov    %r12,%rsi
    0.00 :   40a5a7: mov    %r13,%rdi
    0.00 :   40a5aa: callq  408790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
    0.00 :   40a5af: mov    %r13,%rsi
    0.00 :   40a5b2: mov    %rbx,%rdi
    0.00 :   40a5b5: callq  402710 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a5ba: mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a5c2: lea    0x150(%rsp),%rax
    0.00 :   40a5ca: cmp    %rax,%rdi
    0.00 :   40a5cd: je     40a5e0 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x3c0>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a5cf: mov    0x150(%rsp),%rax
    0.00 :   40a5d7: lea    0x1(%rax),%rsi
         :            # endif
         :            std::align_val_t(alignof(_Tp)));
         :            return;
         :            }
         :            #endif
         :            ::operator delete(__p
    0.00 :   40a5db: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a5e0: mov    0x100(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a5e8: lea    0x110(%rsp),%rax
    0.00 :   40a5f0: cmp    %rax,%rdi
    0.00 :   40a5f3: je     40a606 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x3e6>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a5f5: mov    0x110(%rsp),%rax
    0.00 :   40a5fd: lea    0x1(%rax),%rsi
    0.00 :   40a601: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a606: mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a60e: lea    0xf0(%rsp),%rax
    0.00 :   40a616: cmp    %rax,%rdi
    0.00 :   40a619: je     40a62c <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x40c>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a61b: mov    0xf0(%rsp),%rax
    0.00 :   40a623: lea    0x1(%rax),%rsi
    0.00 :   40a627: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a62c: mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a634: lea    0xd0(%rsp),%rax
    0.00 :   40a63c: cmp    %rax,%rdi
    0.00 :   40a63f: je     40a652 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x432>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a641: mov    0xd0(%rsp),%rax
    0.00 :   40a649: lea    0x1(%rax),%rsi
    0.00 :   40a64d: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a652: mov    0x120(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a65a: lea    0x130(%rsp),%rax
    0.00 :   40a662: cmp    %rax,%rdi
    0.00 :   40a665: je     40a678 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x458>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a667: mov    0x130(%rsp),%rax
    0.00 :   40a66f: lea    0x1(%rax),%rsi
    0.00 :   40a673: callq  4025d0 <operator delete(void*, unsigned long)@plt>
    0.00 :   40a678: mov    $0x4025e0,%edx
    0.00 :   40a67d: mov    $0x628da0,%esi
    0.00 :   40a682: mov    %rbx,%rdi
    0.00 :   40a685: callq  402770 <__cxa_throw@plt>
         :            : (__throw_bad_optional_access(), this->_M_get());
    0.00 :   40a68a: callq  403116 <std::__throw_bad_optional_access()>
    0.00 :   40a68f: callq  402868 <AlignedAllocator<int>::allocate(unsigned long) [clone .part.0]>
         :            throw std::runtime_error("[testBinarySearch for " + std::string(func_name) + "] result is wrong. result is " +
    0.00 :   40a694: mov    $0x10,%edi
    0.00 :   40a699: lea    0x120(%rsp),%r14
    0.00 :   40a6a1: callq  4024d0 <__cxa_allocate_exception@plt>
    0.00 :   40a6a6: mov    %r14,%rdi
    0.00 :   40a6a9: mov    %rax,0x10(%rsp)
    0.00 :   40a6ae: mov    0x28(%r13),%rax
    0.00 :   40a6b2: mov    (%rax,%r12,1),%esi
    0.00 :   40a6b6: callq  406fe0 <std::__cxx11::to_string(int)>
    0.00 :   40a6bb: lea    0xc0(%rsp),%r12
    0.00 :   40a6c3: mov    (%rbx),%esi
    0.00 :   40a6c5: mov    %r12,%rdi
    0.00 :   40a6c8: callq  406fe0 <std::__cxx11::to_string(int)>
         :            { _M_construct(__s, __s + __n); }
    0.00 :   40a6cd: mov    0x18(%rsp),%rdx
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   40a6d2: lea    0x70(%rsp),%rbx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   40a6d7: mov    %r15,%rsi
    0.00 :   40a6da: lea    0x60(%rsp),%rdi
         :            : allocator_type(__a), _M_p(__dat) { }
    0.00 :   40a6df: mov    %rbx,0x60(%rsp)
         :            { _M_construct(__s, __s + __n); }
    0.00 :   40a6e4: add    %r15,%rdx
         :            _M_construct(__beg, __end, _Tag());
    0.00 :   40a6e7: callq  405530 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.0]>
    0.00 :   40a6ec: lea    0x60(%rsp),%rdx
    0.00 :   40a6f1: mov    $0x41e3b9,%esi
    0.00 :   40a6f6: lea    0x80(%rsp),%rdi
    0.00 :   40a6fe: callq  408880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
    0.00 :   40a703: mov    $0x41e3ed,%edx
    0.00 :   40a708: lea    0x80(%rsp),%rsi
    0.00 :   40a710: lea    0xa0(%rsp),%rdi
    0.00 :   40a718: callq  40a100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)>
    0.00 :   40a71d: lea    0xe0(%rsp),%r13
    0.00 :   40a725: mov    %r12,%rdx
    0.00 :   40a728: lea    0xa0(%rsp),%rsi
    0.00 :   40a730: mov    %r13,%rdi
    0.00 :   40a733: callq  408790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
    0.00 :   40a738: lea    0x100(%rsp),%r12
    0.00 :   40a740: mov    $0x41e3e1,%edx
    0.00 :   40a745: mov    %r13,%rsi
    0.00 :   40a748: mov    %r12,%rdi
    0.00 :   40a74b: callq  40a100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)>
    0.00 :   40a750: lea    0x140(%rsp),%r13
    0.00 :   40a758: mov    %r14,%rdx
    0.00 :   40a75b: mov    %r12,%rsi
    0.00 :   40a75e: mov    %r13,%rdi
    0.00 :   40a761: callq  408790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
    0.00 :   40a766: mov    0x10(%rsp),%rdi
    0.00 :   40a76b: mov    %r13,%rsi
    0.00 :   40a76e: callq  402710 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a773: mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a77b: lea    0x150(%rsp),%rax
    0.00 :   40a783: cmp    %rax,%rdi
    0.00 :   40a786: je     40a799 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x579>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a788: mov    0x150(%rsp),%rax
    0.00 :   40a790: lea    0x1(%rax),%rsi
    0.00 :   40a794: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a799: mov    0x100(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a7a1: lea    0x110(%rsp),%rax
    0.00 :   40a7a9: cmp    %rax,%rdi
    0.00 :   40a7ac: je     40a7bf <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x59f>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a7ae: mov    0x110(%rsp),%rax
    0.00 :   40a7b6: lea    0x1(%rax),%rsi
    0.00 :   40a7ba: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a7bf: mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a7c7: lea    0xf0(%rsp),%rax
    0.00 :   40a7cf: cmp    %rax,%rdi
    0.00 :   40a7d2: je     40a7e5 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x5c5>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a7d4: mov    0xf0(%rsp),%rax
    0.00 :   40a7dc: lea    0x1(%rax),%rsi
    0.00 :   40a7e0: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a7e5: mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a7ed: lea    0xb0(%rsp),%rax
    0.00 :   40a7f5: cmp    %rax,%rdi
    0.00 :   40a7f8: je     40a80b <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x5eb>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a7fa: mov    0xb0(%rsp),%rax
    0.00 :   40a802: lea    0x1(%rax),%rsi
    0.00 :   40a806: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a80b: mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a813: lea    0x90(%rsp),%rax
    0.00 :   40a81b: cmp    %rax,%rdi
    0.00 :   40a81e: je     40a831 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x611>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a820: mov    0x90(%rsp),%rax
    0.00 :   40a828: lea    0x1(%rax),%rsi
    0.00 :   40a82c: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a831: mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a836: cmp    %rbx,%rdi
    0.00 :   40a839: je     40a849 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x629>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a83b: mov    0x70(%rsp),%rax
    0.00 :   40a840: lea    0x1(%rax),%rsi
    0.00 :   40a844: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a849: mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a851: lea    0xd0(%rsp),%rax
    0.00 :   40a859: cmp    %rax,%rdi
    0.00 :   40a85c: je     40a86f <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x64f>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a85e: mov    0xd0(%rsp),%rax
    0.00 :   40a866: lea    0x1(%rax),%rsi
    0.00 :   40a86a: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a86f: mov    0x120(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a877: lea    0x130(%rsp),%rax
    0.00 :   40a87f: cmp    %rax,%rdi
    0.00 :   40a882: je     40a895 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x675>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a884: mov    0x130(%rsp),%rax
    0.00 :   40a88c: lea    0x1(%rax),%rsi
    0.00 :   40a890: callq  4025d0 <operator delete(void*, unsigned long)@plt>
    0.00 :   40a895: mov    0x10(%rsp),%rdi
    0.00 :   40a89a: mov    $0x4025e0,%edx
    0.00 :   40a89f: mov    $0x628da0,%esi
    0.00 :   40a8a4: callq  402770 <__cxa_throw@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a8a9: mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a8b1: lea    0x150(%rsp),%rax
    0.00 :   40a8b9: cmp    %rax,%rdi
    0.00 :   40a8bc: je     40a8d2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x6b2>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a8be: mov    0x150(%rsp),%rax
    0.00 :   40a8c6: lea    0x1(%rax),%rsi
    0.00 :   40a8ca: vzeroupper
    0.00 :   40a8cd: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a8d2: mov    0x100(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a8da: lea    0x110(%rsp),%rax
    0.00 :   40a8e2: cmp    %rax,%rdi
    0.00 :   40a8e5: je     40a8fb <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x6db>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a8e7: mov    0x110(%rsp),%rax
    0.00 :   40a8ef: lea    0x1(%rax),%rsi
    0.00 :   40a8f3: vzeroupper
    0.00 :   40a8f6: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a8fb: mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a903: lea    0xf0(%rsp),%rax
    0.00 :   40a90b: cmp    %rax,%rdi
    0.00 :   40a90e: je     40a924 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x704>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a910: mov    0xf0(%rsp),%rax
    0.00 :   40a918: lea    0x1(%rax),%rsi
    0.00 :   40a91c: vzeroupper
    0.00 :   40a91f: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a924: mov    0xa0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a92c: lea    0xb0(%rsp),%rax
    0.00 :   40a934: cmp    %rax,%rdi
    0.00 :   40a937: je     40a94d <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x72d>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a939: mov    0xb0(%rsp),%rax
    0.00 :   40a941: lea    0x1(%rax),%rsi
    0.00 :   40a945: vzeroupper
    0.00 :   40a948: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a94d: mov    0x80(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a955: lea    0x90(%rsp),%rax
    0.00 :   40a95d: cmp    %rax,%rdi
    0.00 :   40a960: je     40a976 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x756>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a962: mov    0x90(%rsp),%rax
    0.00 :   40a96a: lea    0x1(%rax),%rsi
    0.00 :   40a96e: vzeroupper
    0.00 :   40a971: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a976: mov    0x60(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a97b: cmp    %rbx,%rdi
    0.00 :   40a97e: je     40a991 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x771>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a980: mov    0x70(%rsp),%rax
    0.00 :   40a985: lea    0x1(%rax),%rsi
    0.00 :   40a989: vzeroupper
    0.00 :   40a98c: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
         :
         :            #if __cpp_constexpr_dynamic_alloc
         :            constexpr
         :            #endif
         :            ~allocator() _GLIBCXX_NOTHROW { }
    0.00 :   40a991: mov    %r12,%rbx
         :            { return _M_dataplus._M_p; }
    0.00 :   40a994: mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a99c: lea    0xd0(%rsp),%rax
    0.00 :   40a9a4: cmp    %rax,%rdi
    0.00 :   40a9a7: je     40a9bd <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x79d>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a9a9: mov    0xd0(%rsp),%rax
    0.00 :   40a9b1: lea    0x1(%rax),%rsi
    0.00 :   40a9b5: vzeroupper
    0.00 :   40a9b8: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40a9bd: mov    0x120(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40a9c5: lea    0x130(%rsp),%rax
    0.00 :   40a9cd: cmp    %rax,%rdi
    0.00 :   40a9d0: je     40a9e6 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x7c6>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40a9d2: mov    0x130(%rsp),%rax
    0.00 :   40a9da: lea    0x1(%rax),%rsi
    0.00 :   40a9de: vzeroupper
    0.00 :   40a9e1: callq  4025d0 <operator delete(void*, unsigned long)@plt>
    0.00 :   40a9e6: mov    0x10(%rsp),%rdi
    0.00 :   40a9eb: vzeroupper
    0.00 :   40a9ee: callq  402560 <__cxa_free_exception@plt>
    0.00 :   40a9f3: mov    %rbx,%r12
    0.00 :   40a9f6: mov    0x40(%rsp),%rdi
         :            if (__p)
    0.00 :   40a9fb: test   %rdi,%rdi
    0.00 :   40a9fe: je     40aa10 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x7f0>
    0.00 :   40aa00: vzeroupper
    0.00 :   40aa03: callq  402630 <free@plt>
    0.00 :   40aa08: mov    %r12,%rdi
    0.00 :   40aa0b: callq  402780 <_Unwind_Resume@plt>
    0.00 :   40aa10: vzeroupper
    0.00 :   40aa13: jmp    40aa08 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x7e8>
         :            { return _M_dataplus._M_p; }
    0.00 :   40aa15: mov    %rax,%r12
    0.00 :   40aa18: jmpq   40a8a9 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x689>
    0.00 :   40aa1d: mov    %rax,%r12
    0.00 :   40aa20: jmpq   40a8d2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x6b2>
    0.00 :   40aa25: mov    %rax,%r12
    0.00 :   40aa28: jmpq   40a8fb <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x6db>
    0.00 :   40aa2d: mov    %rax,%r12
    0.00 :   40aa30: jmp    40aa37 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x817>
    0.00 :   40aa32: mov    %rax,%r12
    0.00 :   40aa35: jmp    40aa60 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x840>
    0.00 :   40aa37: mov    0x140(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40aa3f: lea    0x150(%rsp),%rax
    0.00 :   40aa47: cmp    %rax,%rdi
    0.00 :   40aa4a: je     40aa60 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x840>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40aa4c: mov    0x150(%rsp),%rax
    0.00 :   40aa54: lea    0x1(%rax),%rsi
    0.00 :   40aa58: vzeroupper
    0.00 :   40aa5b: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40aa60: mov    0x100(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40aa68: lea    0x110(%rsp),%rax
    0.00 :   40aa70: cmp    %rax,%rdi
    0.00 :   40aa73: je     40aa89 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x869>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40aa75: mov    0x110(%rsp),%rax
    0.00 :   40aa7d: lea    0x1(%rax),%rsi
    0.00 :   40aa81: vzeroupper
    0.00 :   40aa84: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40aa89: mov    0xe0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40aa91: lea    0xf0(%rsp),%rax
    0.00 :   40aa99: cmp    %rax,%rdi
    0.00 :   40aa9c: je     40aab2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x892>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40aa9e: mov    0xf0(%rsp),%rax
    0.00 :   40aaa6: lea    0x1(%rax),%rsi
    0.00 :   40aaaa: vzeroupper
    0.00 :   40aaad: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40aab2: mov    0xc0(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40aaba: lea    0xd0(%rsp),%rax
    0.00 :   40aac2: cmp    %rax,%rdi
    0.00 :   40aac5: je     40aadb <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x8bb>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40aac7: mov    0xd0(%rsp),%rax
    0.00 :   40aacf: lea    0x1(%rax),%rsi
    0.00 :   40aad3: vzeroupper
    0.00 :   40aad6: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            { return _M_dataplus._M_p; }
    0.00 :   40aadb: mov    0x120(%rsp),%rdi
         :            if (!_M_is_local())
    0.00 :   40aae3: lea    0x130(%rsp),%rax
    0.00 :   40aaeb: cmp    %rax,%rdi
    0.00 :   40aaee: je     40ab04 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x8e4>
         :            { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    0.00 :   40aaf0: mov    0x130(%rsp),%rax
    0.00 :   40aaf8: lea    0x1(%rax),%rsi
    0.00 :   40aafc: vzeroupper
    0.00 :   40aaff: callq  4025d0 <operator delete(void*, unsigned long)@plt>
         :            throw std::runtime_error("[testBinarySearch for " + std::string(func_name) + "] result is empty, expected " +
    0.00 :   40ab04: mov    %rbx,%rdi
    0.00 :   40ab07: vzeroupper
    0.00 :   40ab0a: callq  402560 <__cxa_free_exception@plt>
    0.00 :   40ab0f: jmpq   40a9f6 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x7d6>
         :            { return _M_dataplus._M_p; }
    0.00 :   40ab14: mov    %rax,%r12
    0.00 :   40ab17: jmpq   40aa89 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x869>
    0.00 :   40ab1c: mov    %rax,%r12
    0.00 :   40ab1f: jmp    40aab2 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x892>
    0.00 :   40ab21: mov    %rax,%r12
    0.00 :   40ab24: jmp    40aadb <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x8bb>
    0.00 :   40ab26: mov    %rax,%r12
    0.00 :   40ab29: jmp    40ab04 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x8e4>
    0.00 :   40ab2b: mov    %rax,%r12
    0.00 :   40ab2e: jmpq   40a976 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x756>
    0.00 :   40ab33: mov    %rax,%rbx
    0.00 :   40ab36: jmpq   40a994 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x774>
    0.00 :   40ab3b: mov    %rax,%rbx
    0.00 :   40ab3e: jmpq   40a9bd <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x79d>
         :            throw std::runtime_error("[testBinarySearch for " + std::string(func_name) + "] result is wrong. result is " +
    0.00 :   40ab43: mov    %rax,%rbx
    0.00 :   40ab46: jmpq   40a9e6 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x7c6>
    0.00 :   40ab4b: mov    %rax,%r12
    0.00 :   40ab4e: jmpq   40a924 <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x704>
    0.00 :   40ab53: mov    %rax,%r12
    0.00 :   40ab56: jmpq   40a94d <double testBinarySearch<false, std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > >(std::optional<std::reference_wrapper<int const> > (&)(std::vector<int, AlignedAllocator<int> > const&, int), std::basic_string_view<char, std::char_traits<char> >, int, std::unordered_map<int, ElementsBlock<true>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, ElementsBlock<true> > > > const&)+0x72d>
 Percent |	Source code & Disassembly of binary_search for cycles:u (433 samples, percent: local period)
